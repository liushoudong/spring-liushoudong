Spring Bean基础
1、定义Spring Bean
什么是BeanDefinition？ --> BeanDefinition是Spring Framework中定义Bean的配置元信息接口，包含：
  Bean的类名
  Bean行为配置元素，如作用域、自动绑定的模式、生命周期回调等
  其他Bean引用，又可称作合作者（Collaborators）或者依赖（Dependencies）
  配置设置，比如Bean属性（Properties）
2、BeanDefinition元信息
  Class -- Bean全类名，必须是具体类，不能用抽象类或接口
  Name -- Bean的名称或者id
  Scope -- Bean的作用域（如：singleton单例模式、prototype原型模式等）
  Constructor arguments -- Bean构造器参数（用于依赖注入）构造器注入
  Properties -- Bean属性设置（用于依赖注入）setter注入
  Autowiring mode -- Bean自动绑定模式（如：通过名称byName）
  Lazy initialization mode -- Bean延迟初始化模式（延迟和非延迟）
  Initialization method -- Bean初始化回调方法名称
  Destruction method -- Bean销毁回调方法名称
  
  BeanDefinition构建
    通过BeanDefinitionBuilder
      builder
        genericBeanDefinition
          通过BeanDefinitionBuilder构建: BeanDefinitionBuilder beanDefinitionBuilder = BeanDefinitionBuilder.genericBeanDefinition(xx.class)
          通过属性设置: beanDefinitionBuilder.addPropertyValue("name", "value").addPropertyValue()......;
          获取BeanDefinition实例: BeanDefinition beanDefinition = beanDefinitionBuilder.getBeanDefinition(); BeanDefinition并非Bean终态，可以自定义进行修改
        rootBeanDefinition
    通过AbstractBeanDefinition以及派生类
      GenericBeanDefinition genericBeanDefinition = new GenericBeanDefinition();
      设置Bean类型 genericBeanDefinition.setBeanClass(xx.class);
      通过MutablePropertyValues批量操作属性: 
        MutablePropertyValues propertyValues = new MutablePropertyValues();
        propertyValues.addPropertyValue("name", "value"); 或者propertyValues.add("name", "value").add()......
        genericBeanDefinition.setPropertyValues(propertyValues);
3、命名Spring Bean
  Bean的名称：每个Bean拥有一个或多个标识符，这些标识符在Bean所在的容器必须是唯一的。通常，一个Bean仅有一个标识符，如果需要额外的，可考虑使用别名来扩充。
  在基于XML的配置元信息中，开发人员可用id或者name属性来规定Bean的标识符。通常Bean的标识符由字母组成，允许出现特殊字符。如果想要引入Bean的别名的话，
  可在name属性使用半角逗号或分号来间隔。Bean的id或name属性并非必须制定，如果留空的话，容器会为Bean自动生成一个唯一的名称。Bean的命名尽管没有限制，不过官方建议采用驼峰的方式。
  
  Bean名称生成器(BeanNameGenerator):Spring FrameWork 2.0.3引入，框架内建两种实现
    DefaultBeanNameGenerator: 默认通用BeanNameGenerator实现
    AnnoationBeanNameGenerator: 基于注解扫描的BeanNameGenerator实现
    
4、Spring Bean的别名
  Bean别名的价值：复用现有的BeanDefinition，更具有场景化的命名方法
    
5、注册Spring Bean
  BeanDefinition注册
    XML配置元信息: <bean name="......"/>
    Java注解配置元信息: @Bean @Component @Import 
    Java API配置元信息: 
      命名方式: BeanDefinitionRegistry#registerBeanDefinition(String, BeanDefinition)
      非命名方式: BeanDefinitionReaderUtils#registerWithGeneratedName(AbstractBeanDefinition, BeanDefinitionRegistry)
      配置类方式: AnnotatedBeanDefinitionReader#register(Class...)
      
      在Spring容器中，Bean不会重复注册
    
6、实例化Spring Bean
  Bean实例化
    常规方式: 
      通过构造器(配置元信息: XML、Java注解和Java API)
      通过静态工厂方法(配置元信息: XML和Java API)
      通过Bean工厂方法(配置元信息: XML和Java API)
      通过FactoryBean(配置元信息: XML、Java注解和Java API)
    特殊方式
      通过ServiceLoaderFactoryBean(配置元信息: XML、Java注解和Java API)
      通过AutowrieCapableBeanFactory#createBean(java.lang.class, int, boolean)
      通过BeanDefinitionRegistry#registerBeanDefinition(String, BeanDefinition)
      
